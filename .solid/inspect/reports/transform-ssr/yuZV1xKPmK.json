{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/entry-server/StartServer.tsx","transforms":[{"name":"__load__","result":"import { MetaProvider } from \"@solidjs/meta\";\nimport { RouteDataFunc, Router, RouterProps } from \"@solidjs/router\";\nimport { ComponentProps, sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\n\nimport { RouteDefinition, Router as IslandsRouter } from \"../islands/server-router\";\n\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FetchEvent, PageEvent } from \"../server/types\";\n\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", { eager: true }))[0] as {\n  default: RouteDataFunc;\n};\nconst dataFn: RouteDataFunc | undefined = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\nexport type Middleware = (input: MiddlewareInput) => MiddlewareFn;\n\n/** Input parameters for to an Exchange factory function. */\nexport interface MiddlewareInput {\n  forward: MiddlewareFn;\n}\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\nexport type MiddlewareFn = (event: FetchEvent) => Promise<Response> | Response;\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware =\n  (exchanges: Middleware[]) =>\n  ({ forward }: MiddlewareInput) =>\n    exchanges.reduceRight(\n      (forward, exchange) =>\n        exchange({\n          forward\n        }),\n      forward\n    );\n\nexport function createHandler(...exchanges: Middleware[]) {\n  const exchange = composeMiddleware(exchanges);\n  return async (event: FetchEvent) => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\n\nexport function StartRouter(\n  props: RouterProps & {\n    location: string;\n    prevLocation: string;\n    routes: RouteDefinition | RouteDefinition[];\n  }\n) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return (\n      <Router {...props}>\n        <IslandsRouter {...props}>{props.children}</IslandsRouter>\n      </Router>\n    );\n  }\n  return <Router {...props}></Router>;\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !import.meta.env.START_SSR;\n\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({ event }: { event: PageEvent }) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return (\n    <ServerContext.Provider value={event}>\n      {devNoSSR ? (\n        <>\n          {docType as unknown as any}\n          <Root />\n        </>\n      ) : (\n        <MetaProvider tags={event.tags as ComponentProps<typeof MetaProvider>[\"tags\"]}>\n          <StartRouter\n            url={path}\n            out={event.routerContext}\n            location={path}\n            prevLocation={event.prevUrl}\n            data={dataFn}\n            routes={fileRoutes}\n          >\n            {docType as unknown as any}\n            <Root />\n          </StartRouter>\n        </MetaProvider>\n      )}\n    </ServerContext.Provider>\n  );\n}\n","start":1676889521900,"end":1676889521900},{"name":"solid","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !import.meta.env.START_SSR;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}","start":1676889521900,"end":1676889521943,"order":"pre"},{"name":"solid-start-csr-dev","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"C:/Users/tobis/gamesa-skola/node_modules/solid-start/dev/CsrRoot.tsx\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !import.meta.env.START_SSR;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}","start":1676889521944,"end":1676889521944,"order":"normal"},{"name":"vite:define","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"C:/Users/tobis/gamesa-skola/node_modules/solid-start/dev/CsrRoot.tsx\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !false;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}","start":1676889521944,"end":1676889521945,"order":"normal"},{"name":"vite:import-glob","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"C:/Users/tobis/gamesa-skola/node_modules/solid-start/dev/CsrRoot.tsx\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !false;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}","start":1676889521945,"end":1676889521957,"order":"normal"},{"name":"vite:import-analysis","result":"import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":true};import.meta.env.START_SSR = false;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"vercel\";import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"/node_modules/@solidjs/meta/dist/index.jsx\";\nimport { Router } from \"/node_modules/@solidjs/router/dist/index.jsx\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"/node_modules/solid-start/dev/CsrRoot.tsx\";\nimport { Router as IslandsRouter } from \"/node_modules/solid-start/islands/server-router.tsx\";\nimport { fileRoutes } from \"/node_modules/solid-start/root/FileRoutes.tsx\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !false;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}","start":1676889521957,"end":1676889521976,"order":"normal"}]}
