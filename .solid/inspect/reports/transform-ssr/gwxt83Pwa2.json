{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/router.tsx","transforms":[{"name":"__load__","result":"import {\n  A as BaseA,\n  Location,\n  NavigateOptions,\n  Navigator,\n  Outlet as BaseOutlet,\n  Routes as BaseRoutes,\n  useLocation as useBaseLocation,\n  useNavigate as useBaseNavigate\n} from \"@solidjs/router\";\nimport { Accessor, ComponentProps, splitProps } from \"solid-js\";\nimport { Outlet as IslandsOutlet } from \"./islands/server-router\";\n\nconst A = import.meta.env.START_ISLANDS_ROUTER\n  ? function IslandsA(props: ComponentProps<typeof BaseA>) {\n      const [, rest] = splitProps(props, [\"state\", \"activeClass\", \"inactiveClass\", \"end\"]);\n      const location = useLocation();\n      const isActive = () => {\n        return props.href.startsWith(\"#\")\n          ? location.hash === props.href\n          : location.pathname === props.href;\n      };\n\n      return (\n        <a\n          link\n          {...rest}\n          state={JSON.stringify(props.state)}\n          classList={{\n            [props.inactiveClass || \"inactive\"]: !isActive(),\n            [props.activeClass || \"active\"]: isActive(),\n            ...rest.classList\n          }}\n          aria-current={isActive() ? \"page\" : undefined}\n        />\n      );\n    }\n  : BaseA;\n\nconst Routes = import.meta.env.START_ISLANDS_ROUTER\n  ? function IslandsRoutes(props: ComponentProps<any>) {\n      return (\n        <IslandsOutlet>\n          <BaseRoutes>{props.children}</BaseRoutes>\n        </IslandsOutlet>\n      );\n    }\n  : BaseRoutes;\n\nconst Outlet = import.meta.env.START_ISLANDS_ROUTER\n  ? function HybridOutlet() {\n      return (\n        <IslandsOutlet>\n          <BaseOutlet />\n        </IslandsOutlet>\n      );\n    }\n  : BaseOutlet;\n\nconst useLocation =\n  import.meta.env.START_ISLANDS_ROUTER && !import.meta.env.SSR\n    ? function IslandsUseLocation() {\n        return {\n          get pathname() {\n            let location = window.LOCATION();\n            return location.pathname;\n          },\n          get hash() {\n            let location = window.LOCATION();\n            return location.hash;\n          }\n        } as Location;\n      }\n    : useBaseLocation;\n\nconst useNavigate =\n  import.meta.env.START_ISLANDS_ROUTER && !import.meta.env.SSR\n    ? function IslandsUseNavigate() {\n        return ((to: string, props?: Partial<NavigateOptions<unknown>>) => window.NAVIGATE(to, props)) as unknown as Navigator;\n      }\n    : useBaseNavigate;\n\ndeclare global {\n  interface Window {\n    LOCATION: Accessor<Location>;\n    NAVIGATE: Navigator;\n  }\n}\n\nexport { A, Outlet, Routes, useLocation, useNavigate };\n","start":1676889522393,"end":1676889522393},{"name":"solid","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrElement as _$ssrElement } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { A as BaseA, Outlet as BaseOutlet, Routes as BaseRoutes, useLocation as useBaseLocation, useNavigate as useBaseNavigate } from \"@solidjs/router\";\nimport { splitProps } from \"solid-js\";\nimport { Outlet as IslandsOutlet } from \"./islands/server-router\";\nconst A = import.meta.env.START_ISLANDS_ROUTER ? function IslandsA(props) {\n  const [, rest] = splitProps(props, [\"state\", \"activeClass\", \"inactiveClass\", \"end\"]);\n  const location = useLocation();\n  const isActive = () => {\n    return props.href.startsWith(\"#\") ? location.hash === props.href : location.pathname === props.href;\n  };\n  return _$ssrElement(\"a\", _$mergeProps({\n    link: true\n  }, rest, {\n    get state() {\n      return JSON.stringify(props.state);\n    },\n    get classList() {\n      return {\n        [props.inactiveClass || \"inactive\"]: !isActive(),\n        [props.activeClass || \"active\"]: isActive(),\n        ...rest.classList\n      };\n    },\n    get [\"aria-current\"]() {\n      return isActive() ? \"page\" : undefined;\n    }\n  }), undefined, true);\n} : BaseA;\nconst Routes = import.meta.env.START_ISLANDS_ROUTER ? function IslandsRoutes(props) {\n  return _$createComponent(IslandsOutlet, {\n    get children() {\n      return _$createComponent(BaseRoutes, {\n        get children() {\n          return props.children;\n        }\n      });\n    }\n  });\n} : BaseRoutes;\nconst Outlet = import.meta.env.START_ISLANDS_ROUTER ? function HybridOutlet() {\n  return _$createComponent(IslandsOutlet, {\n    get children() {\n      return _$createComponent(BaseOutlet, {});\n    }\n  });\n} : BaseOutlet;\nconst useLocation = import.meta.env.START_ISLANDS_ROUTER && !import.meta.env.SSR ? function IslandsUseLocation() {\n  return {\n    get pathname() {\n      let location = window.LOCATION();\n      return location.pathname;\n    },\n    get hash() {\n      let location = window.LOCATION();\n      return location.hash;\n    }\n  };\n} : useBaseLocation;\nconst useNavigate = import.meta.env.START_ISLANDS_ROUTER && !import.meta.env.SSR ? function IslandsUseNavigate() {\n  return (to, props) => window.NAVIGATE(to, props);\n} : useBaseNavigate;\nexport { A, Outlet, Routes, useLocation, useNavigate };","start":1676889522393,"end":1676889522406,"order":"pre"},{"name":"vite:define","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrElement as _$ssrElement } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { A as BaseA, Outlet as BaseOutlet, Routes as BaseRoutes, useLocation as useBaseLocation, useNavigate as useBaseNavigate } from \"@solidjs/router\";\nimport { splitProps } from \"solid-js\";\nimport { Outlet as IslandsOutlet } from \"./islands/server-router\";\nconst A = false ? function IslandsA(props) {\n  const [, rest] = splitProps(props, [\"state\", \"activeClass\", \"inactiveClass\", \"end\"]);\n  const location = useLocation();\n  const isActive = () => {\n    return props.href.startsWith(\"#\") ? location.hash === props.href : location.pathname === props.href;\n  };\n  return _$ssrElement(\"a\", _$mergeProps({\n    link: true\n  }, rest, {\n    get state() {\n      return JSON.stringify(props.state);\n    },\n    get classList() {\n      return {\n        [props.inactiveClass || \"inactive\"]: !isActive(),\n        [props.activeClass || \"active\"]: isActive(),\n        ...rest.classList\n      };\n    },\n    get [\"aria-current\"]() {\n      return isActive() ? \"page\" : undefined;\n    }\n  }), undefined, true);\n} : BaseA;\nconst Routes = false ? function IslandsRoutes(props) {\n  return _$createComponent(IslandsOutlet, {\n    get children() {\n      return _$createComponent(BaseRoutes, {\n        get children() {\n          return props.children;\n        }\n      });\n    }\n  });\n} : BaseRoutes;\nconst Outlet = false ? function HybridOutlet() {\n  return _$createComponent(IslandsOutlet, {\n    get children() {\n      return _$createComponent(BaseOutlet, {});\n    }\n  });\n} : BaseOutlet;\nconst useLocation = false && !import.meta.env.SSR ? function IslandsUseLocation() {\n  return {\n    get pathname() {\n      let location = window.LOCATION();\n      return location.pathname;\n    },\n    get hash() {\n      let location = window.LOCATION();\n      return location.hash;\n    }\n  };\n} : useBaseLocation;\nconst useNavigate = false && !import.meta.env.SSR ? function IslandsUseNavigate() {\n  return (to, props) => window.NAVIGATE(to, props);\n} : useBaseNavigate;\nexport { A, Outlet, Routes, useLocation, useNavigate };","start":1676889522406,"end":1676889522406,"order":"normal"},{"name":"vite:import-analysis","result":"import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":true};import.meta.env.START_SSR = false;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"vercel\";import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrElement as _$ssrElement } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { A as BaseA, Outlet as BaseOutlet, Routes as BaseRoutes, useLocation as useBaseLocation, useNavigate as useBaseNavigate } from \"/node_modules/@solidjs/router/dist/index.jsx\";\nimport { splitProps } from \"solid-js\";\nimport { Outlet as IslandsOutlet } from \"/node_modules/solid-start/islands/server-router.tsx\";\nconst A = false ? function IslandsA(props) {\n  const [, rest] = splitProps(props, [\"state\", \"activeClass\", \"inactiveClass\", \"end\"]);\n  const location = useLocation();\n  const isActive = () => {\n    return props.href.startsWith(\"#\") ? location.hash === props.href : location.pathname === props.href;\n  };\n  return _$ssrElement(\"a\", _$mergeProps({\n    link: true\n  }, rest, {\n    get state() {\n      return JSON.stringify(props.state);\n    },\n    get classList() {\n      return {\n        [props.inactiveClass || \"inactive\"]: !isActive(),\n        [props.activeClass || \"active\"]: isActive(),\n        ...rest.classList\n      };\n    },\n    get [\"aria-current\"]() {\n      return isActive() ? \"page\" : undefined;\n    }\n  }), undefined, true);\n} : BaseA;\nconst Routes = false ? function IslandsRoutes(props) {\n  return _$createComponent(IslandsOutlet, {\n    get children() {\n      return _$createComponent(BaseRoutes, {\n        get children() {\n          return props.children;\n        }\n      });\n    }\n  });\n} : BaseRoutes;\nconst Outlet = false ? function HybridOutlet() {\n  return _$createComponent(IslandsOutlet, {\n    get children() {\n      return _$createComponent(BaseOutlet, {});\n    }\n  });\n} : BaseOutlet;\nconst useLocation = false && !import.meta.env.SSR ? function IslandsUseLocation() {\n  return {\n    get pathname() {\n      let location = window.LOCATION();\n      return location.pathname;\n    },\n    get hash() {\n      let location = window.LOCATION();\n      return location.hash;\n    }\n  };\n} : useBaseLocation;\nconst useNavigate = false && !import.meta.env.SSR ? function IslandsUseNavigate() {\n  return (to, props) => window.NAVIGATE(to, props);\n} : useBaseNavigate;\nexport { A, Outlet, Routes, useLocation, useNavigate };","start":1676889522406,"end":1676889522409,"order":"normal"}]}
