{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/api/middleware.ts","transforms":[{"name":"__load__","result":"import { Middleware } from \"../entry-server\";\nimport { FetchEvent, FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\n\nexport const apiRoutes: Middleware = ({ forward }) => {\n  return async (event: FetchEvent) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n","start":1676889522188,"end":1676889522188},{"name":"vite:esbuild","result":"import { FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\nexport const apiRoutes = ({ forward }) => {\n  return async (event) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n","start":1676889522188,"end":1676889522322,"order":"normal"},{"name":"vite:define","result":"import { FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\nexport const apiRoutes = ({ forward }) => {\n  return async (event) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n","start":1676889522322,"end":1676889522322,"order":"normal"},{"name":"vite:import-analysis","result":"import { FETCH_EVENT } from \"/node_modules/solid-start/server/types.tsx\";\nimport { getApiHandler } from \"/node_modules/solid-start/api/index.ts\";\nimport { internalFetch } from \"/node_modules/solid-start/api/internalFetch.ts\";\nexport const apiRoutes = ({ forward }) => {\n  return async (event) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n","start":1676889522322,"end":1676889522336,"order":"normal"}]}
