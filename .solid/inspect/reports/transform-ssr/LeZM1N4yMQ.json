{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/islands/index.tsx","transforms":[{"name":"__load__","result":"import { Component, ComponentProps, lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { IslandManifest } from \"../server/types\";\nexport { default as clientOnly } from \"./clientOnly\";\n\ndeclare module \"solid-js\" {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"solid-island\": {\n        \"data-props\": string;\n        \"data-component\": string;\n        \"data-island\": string;\n        \"data-when\": \"idle\" | \"load\";\n        children: JSX.Element;\n      };\n      \"solid-children\": {\n        children: JSX.Element;\n      };\n    }\n  }\n}\n\nexport function island<T extends Component<any>>(\n  Comp:\n    | T\n    | (() => Promise<{\n        default: T;\n      }>),\n  path?: string\n): T {\n  let Component = Comp as T;\n\n  if (!import.meta.env.START_ISLANDS) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp as () => Promise<{ default: T }>);\n  }\n\n  function IslandComponent(props: ComponentProps<any>) {\n    return (\n      <Component {...props}>\n        <solid-children>\n          <NoHydration>{props.children}</NoHydration>\n        </solid-children>\n      </Component>\n    );\n  }\n\n  return ((compProps: ComponentProps<T>) => {\n    if (import.meta.env.SSR) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n\n      let fpath;\n\n      if (import.meta.env.PROD && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = (context.env.manifest[path] as IslandManifest).script.href;\n      } else {\n        fpath = `/` + path;\n      }\n\n      return (\n        <Hydration>\n          <solid-island\n            data-props={JSON.stringify(props)}\n            data-component={fpath}\n            data-island={`/` + path}\n            data-when={props[\"client:idle\"] ? \"idle\" : \"load\"}\n          >\n            <IslandComponent {...compProps} />\n          </solid-island>\n        </Hydration>\n      );\n    } else {\n      return <IslandComponent />;\n    }\n  }) as T;\n}\n","start":1676889522366,"end":1676889522366},{"name":"solid","result":"import { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<solid-children\", \">\", \"</solid-children>\"],\n  _tmpl$2 = [\"<solid-island\", \" data-island=\\\"\", \"\\\"\", \">\", \"</solid-island>\"];\nimport { lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nexport { default as clientOnly } from \"./clientOnly\";\nexport function island(Comp, path) {\n  let Component = Comp;\n  if (!import.meta.env.START_ISLANDS) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp);\n  }\n  function IslandComponent(props) {\n    return _$createComponent(Component, _$mergeProps(props, {\n      get children() {\n        return _$ssr(_tmpl$, _$ssrHydrationKey(), _$escape(_$createComponent(NoHydration, {\n          get children() {\n            return props.children;\n          }\n        })));\n      }\n    }));\n  }\n  return compProps => {\n    if (import.meta.env.SSR) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n      let fpath;\n      if (import.meta.env.PROD && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = context.env.manifest[path].script.href;\n      } else {\n        fpath = `/` + path;\n      }\n      return _$createComponent(Hydration, {\n        get children() {\n          return _$ssr(_tmpl$2, _$ssrHydrationKey() + _$ssrAttribute(\"data-props\", _$escape(JSON.stringify(props), true), false) + _$ssrAttribute(\"data-component\", _$escape(fpath, true), false), `/` + _$escape(path, true), _$ssrAttribute(\"data-when\", props[\"client:idle\"] ? \"idle\" : \"load\", false), _$escape(_$createComponent(IslandComponent, compProps)));\n        }\n      });\n    } else {\n      return _$createComponent(IslandComponent, {});\n    }\n  };\n}","start":1676889522366,"end":1676889522383,"order":"pre"},{"name":"vite:define","result":"import { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<solid-children\", \">\", \"</solid-children>\"],\n  _tmpl$2 = [\"<solid-island\", \" data-island=\\\"\", \"\\\"\", \">\", \"</solid-island>\"];\nimport { lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nexport { default as clientOnly } from \"./clientOnly\";\nexport function island(Comp, path) {\n  let Component = Comp;\n  if (!false) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp);\n  }\n  function IslandComponent(props) {\n    return _$createComponent(Component, _$mergeProps(props, {\n      get children() {\n        return _$ssr(_tmpl$, _$ssrHydrationKey(), _$escape(_$createComponent(NoHydration, {\n          get children() {\n            return props.children;\n          }\n        })));\n      }\n    }));\n  }\n  return compProps => {\n    if (import.meta.env.SSR) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n      let fpath;\n      if (import.meta.env.PROD && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = context.env.manifest[path].script.href;\n      } else {\n        fpath = `/` + path;\n      }\n      return _$createComponent(Hydration, {\n        get children() {\n          return _$ssr(_tmpl$2, _$ssrHydrationKey() + _$ssrAttribute(\"data-props\", _$escape(JSON.stringify(props), true), false) + _$ssrAttribute(\"data-component\", _$escape(fpath, true), false), `/` + _$escape(path, true), _$ssrAttribute(\"data-when\", props[\"client:idle\"] ? \"idle\" : \"load\", false), _$escape(_$createComponent(IslandComponent, compProps)));\n        }\n      });\n    } else {\n      return _$createComponent(IslandComponent, {});\n    }\n  };\n}","start":1676889522383,"end":1676889522383,"order":"normal"},{"name":"vite:import-analysis","result":"import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":true};import.meta.env.START_SSR = false;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"vercel\";import { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<solid-children\", \">\", \"</solid-children>\"],\n  _tmpl$2 = [\"<solid-island\", \" data-island=\\\"\", \"\\\"\", \">\", \"</solid-island>\"];\nimport { lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx\";\nexport { default as clientOnly } from \"/node_modules/solid-start/islands/clientOnly.tsx\";\nexport function island(Comp, path) {\n  let Component = Comp;\n  if (!false) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp);\n  }\n  function IslandComponent(props) {\n    return _$createComponent(Component, _$mergeProps(props, {\n      get children() {\n        return _$ssr(_tmpl$, _$ssrHydrationKey(), _$escape(_$createComponent(NoHydration, {\n          get children() {\n            return props.children;\n          }\n        })));\n      }\n    }));\n  }\n  return compProps => {\n    if (import.meta.env.SSR) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n      let fpath;\n      if (import.meta.env.PROD && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = context.env.manifest[path].script.href;\n      } else {\n        fpath = `/` + path;\n      }\n      return _$createComponent(Hydration, {\n        get children() {\n          return _$ssr(_tmpl$2, _$ssrHydrationKey() + _$ssrAttribute(\"data-props\", _$escape(JSON.stringify(props), true), false) + _$ssrAttribute(\"data-component\", _$escape(fpath, true), false), `/` + _$escape(path, true), _$ssrAttribute(\"data-when\", props[\"client:idle\"] ? \"idle\" : \"load\", false), _$escape(_$createComponent(IslandComponent, compProps)));\n        }\n      });\n    } else {\n      return _$createComponent(IslandComponent, {});\n    }\n  };\n}","start":1676889522383,"end":1676889522387,"order":"normal"}]}
