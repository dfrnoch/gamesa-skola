{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/islands/clientOnly.tsx","transforms":[{"name":"__load__","result":"import type { Component, ComponentProps, JSX } from \"solid-js\";\nimport { createMemo, createSignal, onMount, sharedConfig, splitProps, untrack } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\n\n// not using Suspense\nexport default function clientOnly<T extends Component<any>>(\n  fn: () => Promise<{\n    default: T;\n  }>\n) {\n  if (isServer) return (props: ComponentProps<T> & { fallback?: JSX.Element }) => props.fallback;\n\n  const [comp, setComp] = createSignal<T>();\n  fn().then(m => setComp(() => m.default));\n  return (props: ComponentProps<T>) => {\n    let Comp: T | undefined;\n    let m: boolean;\n    const [, rest] = splitProps(props, [\"fallback\"]);\n    if ((Comp = comp()) && !sharedConfig.context) return Comp(rest);\n    const [mounted, setMounted] = createSignal(!sharedConfig.context);\n    onMount(() => setMounted(true));\n    return createMemo(\n      () => (\n        (Comp = comp()), (m = mounted()), untrack(() => (Comp && m ? Comp(rest) : props.fallback))\n      )\n    );\n  };\n}\n","start":1676889522534,"end":1676889522534},{"name":"solid","result":"import { createMemo, createSignal, onMount, sharedConfig, splitProps, untrack } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\n\n// not using Suspense\nexport default function clientOnly(fn) {\n  if (isServer) return props => props.fallback;\n  const [comp, setComp] = createSignal();\n  fn().then(m => setComp(() => m.default));\n  return props => {\n    let Comp;\n    let m;\n    const [, rest] = splitProps(props, [\"fallback\"]);\n    if ((Comp = comp()) && !sharedConfig.context) return Comp(rest);\n    const [mounted, setMounted] = createSignal(!sharedConfig.context);\n    onMount(() => setMounted(true));\n    return createMemo(() => (Comp = comp(), m = mounted(), untrack(() => Comp && m ? Comp(rest) : props.fallback)));\n  };\n}","start":1676889522534,"end":1676889522542,"order":"pre"},{"name":"vite:define","result":"import { createMemo, createSignal, onMount, sharedConfig, splitProps, untrack } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\n\n// not using Suspense\nexport default function clientOnly(fn) {\n  if (isServer) return props => props.fallback;\n  const [comp, setComp] = createSignal();\n  fn().then(m => setComp(() => m.default));\n  return props => {\n    let Comp;\n    let m;\n    const [, rest] = splitProps(props, [\"fallback\"]);\n    if ((Comp = comp()) && !sharedConfig.context) return Comp(rest);\n    const [mounted, setMounted] = createSignal(!sharedConfig.context);\n    onMount(() => setMounted(true));\n    return createMemo(() => (Comp = comp(), m = mounted(), untrack(() => Comp && m ? Comp(rest) : props.fallback)));\n  };\n}","start":1676889522542,"end":1676889522542,"order":"normal"},{"name":"vite:import-analysis","result":"import { createMemo, createSignal, onMount, sharedConfig, splitProps, untrack } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\n\n// not using Suspense\nexport default function clientOnly(fn) {\n  if (isServer) return props => props.fallback;\n  const [comp, setComp] = createSignal();\n  fn().then(m => setComp(() => m.default));\n  return props => {\n    let Comp;\n    let m;\n    const [, rest] = splitProps(props, [\"fallback\"]);\n    if ((Comp = comp()) && !sharedConfig.context) return Comp(rest);\n    const [mounted, setMounted] = createSignal(!sharedConfig.context);\n    onMount(() => setMounted(true));\n    return createMemo(() => (Comp = comp(), m = mounted(), untrack(() => Comp && m ? Comp(rest) : props.fallback)));\n  };\n}","start":1676889522542,"end":1676889522542,"order":"normal"}]}
