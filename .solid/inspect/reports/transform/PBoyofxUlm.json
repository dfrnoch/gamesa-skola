{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/session/cookieStorage.ts?v=2f17421b","transforms":[{"name":"__load__","result":"/*!\n * Original code by Remix Sofware Inc\n * MIT Licensed, Copyright(c) 2021 Remix software Inc, see LICENSE.remix.md for details\n * \n * Credits to the Remix team:\n * https://github.com/remix-run/remix/blob/main/packages/remix-server-runtime/cookieStorage.ts\n */\n\nimport type { CreateCookieFunction } from \"./cookies\";\nimport { isCookie } from \"./cookies\";\nimport type { SessionIdStorageStrategy, SessionStorage } from \"./sessions\";\nimport { createSession, warnOnceAboutSigningSessionCookie } from \"./sessions\";\n\ninterface CookieSessionStorageOptions {\n  /**\n   * The Cookie used to store the session data on the client, or options used\n   * to automatically create one.\n   */\n  cookie?: SessionIdStorageStrategy[\"cookie\"];\n}\n\nexport type CreateCookieSessionStorageFunction = (\n  options?: CookieSessionStorageOptions\n) => SessionStorage;\n\n/**\n * Creates and returns a SessionStorage object that stores all session data\n * directly in the session cookie itself.\n *\n * This has the advantage that no database or other backend services are\n * needed, and can help to simplify some load-balanced scenarios. However, it\n * also has the limitation that serialized session data may not exceed the\n * browser's maximum cookie size. Trade-offs!\n *\n * @see https://remix.run/api/remix#createcookiesessionstorage\n */\nexport const createCookieSessionStorageFactory =\n  (createCookie: CreateCookieFunction): CreateCookieSessionStorageFunction =>\n  ({ cookie: cookieArg } = {}) => {\n    let cookie = isCookie(cookieArg)\n      ? cookieArg\n      : createCookie(cookieArg?.name || \"__session\", cookieArg);\n\n    warnOnceAboutSigningSessionCookie(cookie);\n\n    return {\n      async getSession(cookieHeader, options) {\n        return createSession((cookieHeader && (await cookie.parse(cookieHeader, options))) || {});\n      },\n      async commitSession(session, options) {\n        return cookie.serialize(session.data, options);\n      },\n      async destroySession(_session, options) {\n        return cookie.serialize(\"\", {\n          ...options,\n          expires: new Date(0)\n        });\n      }\n    };\n  };\n","start":1676889524224,"end":1676889524224},{"name":"vite:esbuild","result":"/*!\n * Original code by Remix Sofware Inc\n * MIT Licensed, Copyright(c) 2021 Remix software Inc, see LICENSE.remix.md for details\n * \n * Credits to the Remix team:\n * https://github.com/remix-run/remix/blob/main/packages/remix-server-runtime/cookieStorage.ts\n */\nimport { isCookie } from \"./cookies\";\nimport { createSession, warnOnceAboutSigningSessionCookie } from \"./sessions\";\nexport const createCookieSessionStorageFactory = (createCookie) => ({ cookie: cookieArg } = {}) => {\n  let cookie = isCookie(cookieArg) ? cookieArg : createCookie(cookieArg?.name || \"__session\", cookieArg);\n  warnOnceAboutSigningSessionCookie(cookie);\n  return {\n    async getSession(cookieHeader, options) {\n      return createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});\n    },\n    async commitSession(session, options) {\n      return cookie.serialize(session.data, options);\n    },\n    async destroySession(_session, options) {\n      return cookie.serialize(\"\", {\n        ...options,\n        expires: new Date(0)\n      });\n    }\n  };\n};\n","start":1676889524224,"end":1676889524380,"order":"normal"},{"name":"vite:import-analysis","result":"/*!\n * Original code by Remix Sofware Inc\n * MIT Licensed, Copyright(c) 2021 Remix software Inc, see LICENSE.remix.md for details\n * \n * Credits to the Remix team:\n * https://github.com/remix-run/remix/blob/main/packages/remix-server-runtime/cookieStorage.ts\n */\nimport { isCookie } from \"/node_modules/solid-start/session/cookies.ts?v=2f17421b\";\nimport { createSession, warnOnceAboutSigningSessionCookie } from \"/node_modules/solid-start/session/sessions.ts?v=2f17421b\";\nexport const createCookieSessionStorageFactory = (createCookie) => ({ cookie: cookieArg } = {}) => {\n  let cookie = isCookie(cookieArg) ? cookieArg : createCookie(cookieArg?.name || \"__session\", cookieArg);\n  warnOnceAboutSigningSessionCookie(cookie);\n  return {\n    async getSession(cookieHeader, options) {\n      return createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});\n    },\n    async commitSession(session, options) {\n      return cookie.serialize(session.data, options);\n    },\n    async destroySession(_session, options) {\n      return cookie.serialize(\"\", {\n        ...options,\n        expires: new Date(0)\n      });\n    }\n  };\n};\n","start":1676889524381,"end":1676889524387,"order":"normal"}]}
