{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/@tanstack/solid-query/build/solid/createQueries.js?v=2f17421b","transforms":[{"name":"__load__","result":"import { createComputed, onCleanup, onMount } from 'solid-js';\nimport { QueriesObserver } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider';\nimport { createStore, unwrap } from 'solid-js/store';\nimport { scheduleMicrotask } from './utils';\nexport function createQueries(queriesOptions) {\n    const queryClient = useQueryClient({ context: queriesOptions.context });\n    const normalizeOptions = (options) => {\n        const normalizedOptions = { ...options, queryKey: options.queryKey?.() };\n        const defaultedOptions = queryClient.defaultQueryOptions(normalizedOptions);\n        defaultedOptions._optimisticResults = 'optimistic';\n        return defaultedOptions;\n    };\n    const defaultedQueries = queriesOptions.queries.map((options) => normalizeOptions(options));\n    const observer = new QueriesObserver(queryClient, defaultedQueries);\n    const [state, setState] = createStore(observer.getOptimisticResult(defaultedQueries));\n    const taskQueue = [];\n    const unsubscribe = observer.subscribe((result) => {\n        taskQueue.push(() => {\n            setState(unwrap(result));\n        });\n        scheduleMicrotask(() => {\n            const taskToRun = taskQueue.pop();\n            if (taskToRun) {\n                taskToRun();\n                taskQueue.splice(0, taskQueue.length);\n            }\n        });\n    });\n    onCleanup(unsubscribe);\n    onMount(() => {\n        observer.setQueries(defaultedQueries, { listeners: false });\n    });\n    createComputed(() => {\n        const updateDefaultedQueries = queriesOptions.queries.map((options) => normalizeOptions(options));\n        observer.setQueries(updateDefaultedQueries);\n    });\n    return state;\n}\n","start":1676889524159,"end":1676889524159},{"name":"vite:import-analysis","result":"import { createComputed, onCleanup, onMount } from '/node_modules/.vite/deps/solid-js.js?v=53da11be';\nimport { QueriesObserver } from '/node_modules/@tanstack/query-core/build/lib/index.mjs?v=2f17421b';\nimport { useQueryClient } from '/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx?v=2f17421b';\nimport { createStore, unwrap } from '/node_modules/.vite/deps/solid-js_store.js?v=53da11be';\nimport { scheduleMicrotask } from '/node_modules/@tanstack/solid-query/build/solid/utils.js?v=2f17421b';\nexport function createQueries(queriesOptions) {\n    const queryClient = useQueryClient({ context: queriesOptions.context });\n    const normalizeOptions = (options) => {\n        const normalizedOptions = { ...options, queryKey: options.queryKey?.() };\n        const defaultedOptions = queryClient.defaultQueryOptions(normalizedOptions);\n        defaultedOptions._optimisticResults = 'optimistic';\n        return defaultedOptions;\n    };\n    const defaultedQueries = queriesOptions.queries.map((options) => normalizeOptions(options));\n    const observer = new QueriesObserver(queryClient, defaultedQueries);\n    const [state, setState] = createStore(observer.getOptimisticResult(defaultedQueries));\n    const taskQueue = [];\n    const unsubscribe = observer.subscribe((result) => {\n        taskQueue.push(() => {\n            setState(unwrap(result));\n        });\n        scheduleMicrotask(() => {\n            const taskToRun = taskQueue.pop();\n            if (taskToRun) {\n                taskToRun();\n                taskQueue.splice(0, taskQueue.length);\n            }\n        });\n    });\n    onCleanup(unsubscribe);\n    onMount(() => {\n        observer.setQueries(defaultedQueries, { listeners: false });\n    });\n    createComputed(() => {\n        const updateDefaultedQueries = queriesOptions.queries.map((options) => normalizeOptions(options));\n        observer.setQueries(updateDefaultedQueries);\n    });\n    return state;\n}\n","start":1676889524159,"end":1676889524166,"order":"normal"}]}
