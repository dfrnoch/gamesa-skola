{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx?v=2f17421b","transforms":[{"name":"__load__","result":"import { createContext, useContext, onMount, onCleanup, mergeProps, } from 'solid-js';\nexport const defaultContext = createContext(undefined);\nconst QueryClientSharingContext = createContext(false);\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if Solid Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n    if (context) {\n        return context;\n    }\n    if (contextSharing && typeof window !== 'undefined') {\n        if (!window.SolidQueryClientContext) {\n            window.SolidQueryClientContext = defaultContext;\n        }\n        return window.SolidQueryClientContext;\n    }\n    return defaultContext;\n}\nexport const useQueryClient = ({ context } = {}) => {\n    const queryClient = useContext(getQueryClientContext(context, useContext(QueryClientSharingContext)));\n    if (!queryClient) {\n        throw new Error('No QueryClient set, use QueryClientProvider to set one');\n    }\n    return queryClient;\n};\nexport const QueryClientProvider = (props) => {\n    const mergedProps = mergeProps({\n        contextSharing: false,\n    }, props);\n    onMount(() => {\n        mergedProps.client.mount();\n        if (process.env.NODE_ENV !== 'production' && mergedProps.contextSharing) {\n            mergedProps.client\n                .getLogger()\n                .error(`The contextSharing option has been deprecated and will be removed in the next major version`);\n        }\n    });\n    onCleanup(() => mergedProps.client.unmount());\n    const QueryClientContext = getQueryClientContext(mergedProps.context, mergedProps.contextSharing);\n    return (<QueryClientSharingContext.Provider value={!mergedProps.context && mergedProps.contextSharing}>\n      <QueryClientContext.Provider value={mergedProps.client}>\n        {mergedProps.children}\n      </QueryClientContext.Provider>\n    </QueryClientSharingContext.Provider>);\n};\n","start":1676889524095,"end":1676889524095},{"name":"solid","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { memo as _$memo } from \"solid-js/web\";\nimport { createContext, useContext, onMount, onCleanup, mergeProps } from 'solid-js';\nexport const defaultContext = createContext(undefined);\nconst QueryClientSharingContext = createContext(false);\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if Solid Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.SolidQueryClientContext) {\n      window.SolidQueryClientContext = defaultContext;\n    }\n    return window.SolidQueryClientContext;\n  }\n  return defaultContext;\n}\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = useContext(getQueryClientContext(context, useContext(QueryClientSharingContext)));\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n  return queryClient;\n};\nexport const QueryClientProvider = props => {\n  const mergedProps = mergeProps({\n    contextSharing: false\n  }, props);\n  onMount(() => {\n    mergedProps.client.mount();\n    if (process.env.NODE_ENV !== 'production' && mergedProps.contextSharing) {\n      mergedProps.client.getLogger().error(`The contextSharing option has been deprecated and will be removed in the next major version`);\n    }\n  });\n  onCleanup(() => mergedProps.client.unmount());\n  const QueryClientContext = getQueryClientContext(mergedProps.context, mergedProps.contextSharing);\n  return _$createComponent(QueryClientSharingContext.Provider, {\n    get value() {\n      return !mergedProps.context && mergedProps.contextSharing;\n    },\n    get children() {\n      return _$createComponent(QueryClientContext.Provider, {\n        get value() {\n          return mergedProps.client;\n        },\n        get children() {\n          return mergedProps.children;\n        }\n      });\n    }\n  });\n};","start":1676889524095,"end":1676889524100,"order":"pre"},{"name":"vite:client-inject","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { memo as _$memo } from \"solid-js/web\";\nimport { createContext, useContext, onMount, onCleanup, mergeProps } from 'solid-js';\nexport const defaultContext = createContext(undefined);\nconst QueryClientSharingContext = createContext(false);\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if Solid Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.SolidQueryClientContext) {\n      window.SolidQueryClientContext = defaultContext;\n    }\n    return window.SolidQueryClientContext;\n  }\n  return defaultContext;\n}\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = useContext(getQueryClientContext(context, useContext(QueryClientSharingContext)));\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n  return queryClient;\n};\nexport const QueryClientProvider = props => {\n  const mergedProps = mergeProps({\n    contextSharing: false\n  }, props);\n  onMount(() => {\n    mergedProps.client.mount();\n    if (\"development\" !== 'production' && mergedProps.contextSharing) {\n      mergedProps.client.getLogger().error(`The contextSharing option has been deprecated and will be removed in the next major version`);\n    }\n  });\n  onCleanup(() => mergedProps.client.unmount());\n  const QueryClientContext = getQueryClientContext(mergedProps.context, mergedProps.contextSharing);\n  return _$createComponent(QueryClientSharingContext.Provider, {\n    get value() {\n      return !mergedProps.context && mergedProps.contextSharing;\n    },\n    get children() {\n      return _$createComponent(QueryClientContext.Provider, {\n        get value() {\n          return mergedProps.client;\n        },\n        get children() {\n          return mergedProps.children;\n        }\n      });\n    }\n  });\n};","start":1676889524100,"end":1676889524100,"order":"normal"},{"name":"vite:import-analysis","result":"import { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=53da11be\";\nimport { memo as _$memo } from \"/node_modules/.vite/deps/solid-js_web.js?v=53da11be\";\nimport { createContext, useContext, onMount, onCleanup, mergeProps } from '/node_modules/.vite/deps/solid-js.js?v=53da11be';\nexport const defaultContext = createContext(undefined);\nconst QueryClientSharingContext = createContext(false);\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if Solid Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.SolidQueryClientContext) {\n      window.SolidQueryClientContext = defaultContext;\n    }\n    return window.SolidQueryClientContext;\n  }\n  return defaultContext;\n}\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = useContext(getQueryClientContext(context, useContext(QueryClientSharingContext)));\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n  return queryClient;\n};\nexport const QueryClientProvider = props => {\n  const mergedProps = mergeProps({\n    contextSharing: false\n  }, props);\n  onMount(() => {\n    mergedProps.client.mount();\n    if (\"development\" !== 'production' && mergedProps.contextSharing) {\n      mergedProps.client.getLogger().error(`The contextSharing option has been deprecated and will be removed in the next major version`);\n    }\n  });\n  onCleanup(() => mergedProps.client.unmount());\n  const QueryClientContext = getQueryClientContext(mergedProps.context, mergedProps.contextSharing);\n  return _$createComponent(QueryClientSharingContext.Provider, {\n    get value() {\n      return !mergedProps.context && mergedProps.contextSharing;\n    },\n    get children() {\n      return _$createComponent(QueryClientContext.Provider, {\n        get value() {\n          return mergedProps.client;\n        },\n        get children() {\n          return mergedProps.children;\n        }\n      });\n    }\n  });\n};","start":1676889524100,"end":1676889524101,"order":"normal"}]}
