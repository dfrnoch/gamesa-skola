{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/@tanstack/solid-query/build/solid/useIsFetching.js?v=2f17421b","transforms":[{"name":"__load__","result":"import { useQueryClient } from './QueryClientProvider';\nimport { createSignal, onCleanup, createComputed, createMemo } from 'solid-js';\nimport { parseFilterArgs } from './utils';\nexport function useIsFetching(arg1, arg2, arg3) {\n    const [filtersObj, optionsObj = {}] = parseFilterArgs(arg1, arg2, arg3);\n    const [filters, setFilters] = createSignal(filtersObj);\n    const [options, setOptions] = createSignal(optionsObj);\n    const queryClient = createMemo(() => useQueryClient({ context: options().context }));\n    const queryCache = createMemo(() => queryClient().getQueryCache());\n    const [fetches, setFetches] = createSignal(queryClient().isFetching(filters));\n    createComputed(() => {\n        const [newFiltersObj, newOptionsObj = {}] = parseFilterArgs(arg1, arg2, arg3);\n        setFilters(newFiltersObj);\n        setOptions(newOptionsObj);\n    });\n    const unsubscribe = queryCache().subscribe(() => {\n        setFetches(queryClient().isFetching(filters()));\n    });\n    onCleanup(() => {\n        unsubscribe();\n    });\n    return fetches;\n}\n","start":1676889524102,"end":1676889524102},{"name":"vite:import-analysis","result":"import { useQueryClient } from '/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx?v=2f17421b';\nimport { createSignal, onCleanup, createComputed, createMemo } from '/node_modules/.vite/deps/solid-js.js?v=53da11be';\nimport { parseFilterArgs } from '/node_modules/@tanstack/solid-query/build/solid/utils.js?v=2f17421b';\nexport function useIsFetching(arg1, arg2, arg3) {\n    const [filtersObj, optionsObj = {}] = parseFilterArgs(arg1, arg2, arg3);\n    const [filters, setFilters] = createSignal(filtersObj);\n    const [options, setOptions] = createSignal(optionsObj);\n    const queryClient = createMemo(() => useQueryClient({ context: options().context }));\n    const queryCache = createMemo(() => queryClient().getQueryCache());\n    const [fetches, setFetches] = createSignal(queryClient().isFetching(filters));\n    createComputed(() => {\n        const [newFiltersObj, newOptionsObj = {}] = parseFilterArgs(arg1, arg2, arg3);\n        setFilters(newFiltersObj);\n        setOptions(newOptionsObj);\n    });\n    const unsubscribe = queryCache().subscribe(() => {\n        setFetches(queryClient().isFetching(filters()));\n    });\n    onCleanup(() => {\n        unsubscribe();\n    });\n    return fetches;\n}\n","start":1676889524102,"end":1676889524107,"order":"normal"}]}
