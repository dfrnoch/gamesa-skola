{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-start/entry-client/mount.tsx?v=2f17421b","transforms":[{"name":"__load__","result":"import type { JSX } from \"solid-js\";\nimport { getOwner } from \"solid-js\";\nimport { createComponent, getNextElement, hydrate, render } from \"solid-js/web\";\n\nimport mountRouter from \"../islands/router\";\n\ndeclare global {\n  interface Window {\n    INSPECT: () => void;\n  }\n}\n\nif (import.meta.env.DEV) {\n  localStorage.setItem(\"debug\", import.meta.env.DEBUG ?? \"start*\");\n  // const { default: createDebugger } = await import(\"debug\");\n  // window._$DEBUG = createDebugger(\"start:client\");\n  window._$DEBUG = console.log as unknown as any;\n\n  _$DEBUG(`import.meta.env.DEV = ${import.meta.env.DEV}`);\n  _$DEBUG(`import.meta.env.PROD = ${import.meta.env.PROD}`);\n  _$DEBUG(`import.meta.env.START_SSR = ${import.meta.env.START_SSR}`);\n  _$DEBUG(`import.meta.env.START_ISLANDS = ${import.meta.env.START_ISLANDS}`);\n  _$DEBUG(`import.meta.env.START_ISLANDS_ROUTER = ${import.meta.env.START_ISLANDS_ROUTER}`);\n  _$DEBUG(`import.meta.env.SSR = ${import.meta.env.SSR}`);\n\n  window.INSPECT = () => {\n    window.open(window.location.href.replace(window.location.pathname, \"/__inspect\"));\n  };\n}\n\nfunction lookupOwner(el: HTMLElement) {\n  const parent = el.closest(\"solid-children\");\n  return parent && (parent as any).__$owner;\n}\n\nexport default function mount(code?: () => JSX.Element, element?: Document) {\n  if (import.meta.env.START_ISLANDS) {\n    mountRouter();\n\n    async function mountIsland(el: HTMLElement) {\n      let Component = el.dataset.island && window._$HY.islandMap[el.dataset.island];\n      if (!Component || !el.dataset.hk) return;\n      _$DEBUG(\n        \"hydrating island\",\n        el.dataset.island,\n        el.dataset.hk.slice(0, el.dataset.hk.length - 1) + `1-`,\n        el\n      );\n\n      hydrate(\n        () =>\n          !Component || typeof Component === \"string\"\n            ? Component\n            : createComponent(Component, {\n                ...JSON.parse(el.dataset.props || \"undefined\"),\n                get children() {\n                  const el = getNextElement();\n                  (el as any).__$owner = getOwner();\n                  return;\n                }\n              }),\n        el,\n        {\n          renderId: el.dataset.hk.slice(0, el.dataset.hk.length - 1) + `1-`,\n          owner: lookupOwner(el)\n        }\n      );\n\n      delete el.dataset.hk;\n    }\n\n    let queue: HTMLElement[] = [];\n    let queued = false;\n    function runTaskQueue(info: { timeRemaining(): number }) {\n      while (info.timeRemaining() > 0 && queue.length) {\n        mountIsland(queue.shift() as HTMLElement);\n      }\n      if (queue.length) {\n        requestIdleCallback(runTaskQueue);\n      } else queued = false;\n    }\n    window._$HY.hydrateIslands = () => {\n      const islands = document.querySelectorAll(\"solid-island[data-hk]\");\n      const assets = new Set<string>();\n      islands.forEach((el: Element) => assets.add((el as HTMLElement).dataset.component || \"\"));\n      Promise.all([...assets].map(asset => import(/* @vite-ignore */ asset))).then(() => {\n        islands.forEach((el: Element) => {\n          if ((el as HTMLElement).dataset.when === \"idle\" && \"requestIdleCallback\" in window) {\n            if (!queued) {\n              queued = true;\n              requestIdleCallback(runTaskQueue);\n            }\n            queue.push(el as HTMLElement);\n          } else mountIsland(el as HTMLElement);\n        });\n      });\n    };\n    window._$HY.fe = window._$HY.hydrateIslands;\n\n    window._$HY.hydrateIslands();\n\n    return;\n  } else if (import.meta.env.START_ISLANDS_ROUTER) {\n    mountRouter();\n    return;\n  }\n\n  if (import.meta.env.START_SSR) {\n    code && element && hydrate(code, element);\n  } else {\n    code && element && render(code, element === document ? element.body : element);\n  }\n}\n","start":1676889523300,"end":1676889523300},{"name":"solid","result":"import { getOwner } from \"solid-js\";\nimport { createComponent, getNextElement, hydrate, render } from \"solid-js/web\";\nimport mountRouter from \"../islands/router\";\nif (import.meta.env.DEV) {\n  localStorage.setItem(\"debug\", import.meta.env.DEBUG ?? \"start*\");\n  // const { default: createDebugger } = await import(\"debug\");\n  // window._$DEBUG = createDebugger(\"start:client\");\n  window._$DEBUG = console.log;\n  _$DEBUG(`import.meta.env.DEV = ${import.meta.env.DEV}`);\n  _$DEBUG(`import.meta.env.PROD = ${import.meta.env.PROD}`);\n  _$DEBUG(`import.meta.env.START_SSR = ${import.meta.env.START_SSR}`);\n  _$DEBUG(`import.meta.env.START_ISLANDS = ${import.meta.env.START_ISLANDS}`);\n  _$DEBUG(`import.meta.env.START_ISLANDS_ROUTER = ${import.meta.env.START_ISLANDS_ROUTER}`);\n  _$DEBUG(`import.meta.env.SSR = ${import.meta.env.SSR}`);\n  window.INSPECT = () => {\n    window.open(window.location.href.replace(window.location.pathname, \"/__inspect\"));\n  };\n}\nfunction lookupOwner(el) {\n  const parent = el.closest(\"solid-children\");\n  return parent && parent.__$owner;\n}\nexport default function mount(code, element) {\n  if (import.meta.env.START_ISLANDS) {\n    mountRouter();\n    async function mountIsland(el) {\n      let Component = el.dataset.island && window._$HY.islandMap[el.dataset.island];\n      if (!Component || !el.dataset.hk) return;\n      _$DEBUG(\"hydrating island\", el.dataset.island, el.dataset.hk.slice(0, el.dataset.hk.length - 1) + `1-`, el);\n      hydrate(() => !Component || typeof Component === \"string\" ? Component : createComponent(Component, {\n        ...JSON.parse(el.dataset.props || \"undefined\"),\n        get children() {\n          const el = getNextElement();\n          el.__$owner = getOwner();\n          return;\n        }\n      }), el, {\n        renderId: el.dataset.hk.slice(0, el.dataset.hk.length - 1) + `1-`,\n        owner: lookupOwner(el)\n      });\n      delete el.dataset.hk;\n    }\n    let queue = [];\n    let queued = false;\n    function runTaskQueue(info) {\n      while (info.timeRemaining() > 0 && queue.length) {\n        mountIsland(queue.shift());\n      }\n      if (queue.length) {\n        requestIdleCallback(runTaskQueue);\n      } else queued = false;\n    }\n    window._$HY.hydrateIslands = () => {\n      const islands = document.querySelectorAll(\"solid-island[data-hk]\");\n      const assets = new Set();\n      islands.forEach(el => assets.add(el.dataset.component || \"\"));\n      Promise.all([...assets].map(asset => import( /* @vite-ignore */asset))).then(() => {\n        islands.forEach(el => {\n          if (el.dataset.when === \"idle\" && \"requestIdleCallback\" in window) {\n            if (!queued) {\n              queued = true;\n              requestIdleCallback(runTaskQueue);\n            }\n            queue.push(el);\n          } else mountIsland(el);\n        });\n      });\n    };\n    window._$HY.fe = window._$HY.hydrateIslands;\n    window._$HY.hydrateIslands();\n    return;\n  } else if (import.meta.env.START_ISLANDS_ROUTER) {\n    mountRouter();\n    return;\n  }\n  if (import.meta.env.START_SSR) {\n    code && element && hydrate(code, element);\n  } else {\n    code && element && render(code, element === document ? element.body : element);\n  }\n}","start":1676889523300,"end":1676889523313,"order":"pre"},{"name":"vite:import-analysis","result":"import { injectQuery as __vite__injectQuery } from \"/@vite/client\";import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":false};import.meta.env.START_SSR = false;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"C:\\\\Users\\\\tobis\\\\gamesa-skola\\\\src\\\\entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"vercel\";import { getOwner } from \"/node_modules/.vite/deps/solid-js.js?v=53da11be\";\nimport { createComponent, getNextElement, hydrate, render } from \"/node_modules/.vite/deps/solid-js_web.js?v=53da11be\";\nimport mountRouter from \"/node_modules/solid-start/islands/router.ts?v=2f17421b\";\nif (import.meta.env.DEV) {\n  localStorage.setItem(\"debug\", import.meta.env.DEBUG ?? \"start*\");\n  // const { default: createDebugger } = await import(\"debug\");\n  // window._$DEBUG = createDebugger(\"start:client\");\n  window._$DEBUG = console.log;\n  _$DEBUG(`import.meta.env.DEV = ${import.meta.env.DEV}`);\n  _$DEBUG(`import.meta.env.PROD = ${import.meta.env.PROD}`);\n  _$DEBUG(`import.meta.env.START_SSR = ${import.meta.env.START_SSR}`);\n  _$DEBUG(`import.meta.env.START_ISLANDS = ${import.meta.env.START_ISLANDS}`);\n  _$DEBUG(`import.meta.env.START_ISLANDS_ROUTER = ${import.meta.env.START_ISLANDS_ROUTER}`);\n  _$DEBUG(`import.meta.env.SSR = ${import.meta.env.SSR}`);\n  window.INSPECT = () => {\n    window.open(window.location.href.replace(window.location.pathname, \"/__inspect\"));\n  };\n}\nfunction lookupOwner(el) {\n  const parent = el.closest(\"solid-children\");\n  return parent && parent.__$owner;\n}\nexport default function mount(code, element) {\n  if (import.meta.env.START_ISLANDS) {\n    mountRouter();\n    async function mountIsland(el) {\n      let Component = el.dataset.island && window._$HY.islandMap[el.dataset.island];\n      if (!Component || !el.dataset.hk) return;\n      _$DEBUG(\"hydrating island\", el.dataset.island, el.dataset.hk.slice(0, el.dataset.hk.length - 1) + `1-`, el);\n      hydrate(() => !Component || typeof Component === \"string\" ? Component : createComponent(Component, {\n        ...JSON.parse(el.dataset.props || \"undefined\"),\n        get children() {\n          const el = getNextElement();\n          el.__$owner = getOwner();\n          return;\n        }\n      }), el, {\n        renderId: el.dataset.hk.slice(0, el.dataset.hk.length - 1) + `1-`,\n        owner: lookupOwner(el)\n      });\n      delete el.dataset.hk;\n    }\n    let queue = [];\n    let queued = false;\n    function runTaskQueue(info) {\n      while (info.timeRemaining() > 0 && queue.length) {\n        mountIsland(queue.shift());\n      }\n      if (queue.length) {\n        requestIdleCallback(runTaskQueue);\n      } else queued = false;\n    }\n    window._$HY.hydrateIslands = () => {\n      const islands = document.querySelectorAll(\"solid-island[data-hk]\");\n      const assets = new Set();\n      islands.forEach(el => assets.add(el.dataset.component || \"\"));\n      Promise.all([...assets].map(asset => import( /* @vite-ignore */__vite__injectQuery(asset, 'import')))).then(() => {\n        islands.forEach(el => {\n          if (el.dataset.when === \"idle\" && \"requestIdleCallback\" in window) {\n            if (!queued) {\n              queued = true;\n              requestIdleCallback(runTaskQueue);\n            }\n            queue.push(el);\n          } else mountIsland(el);\n        });\n      });\n    };\n    window._$HY.fe = window._$HY.hydrateIslands;\n    window._$HY.hydrateIslands();\n    return;\n  } else if (import.meta.env.START_ISLANDS_ROUTER) {\n    mountRouter();\n    return;\n  }\n  if (import.meta.env.START_SSR) {\n    code && element && hydrate(code, element);\n  } else {\n    code && element && render(code, element === document ? element.body : element);\n  }\n}","start":1676889523313,"end":1676889523317,"order":"normal"}]}
