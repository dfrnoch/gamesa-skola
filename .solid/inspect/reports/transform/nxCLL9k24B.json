{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-trpc/dist/shared/proxy/utilsProxy.js?v=2f17421b","transforms":[{"name":"__load__","result":"import { createFlatProxy, createRecursiveProxy } from \"@trpc/server/shared\";\nimport { contextProps, } from \"../../internals/context\";\nimport { getQueryKey } from \"../../internals/getQueryKey\";\n/**\n * @internal\n */\nexport function createSolidQueryUtilsProxy(context) {\n    return createFlatProxy((key) => {\n        const contextName = key;\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return createRecursiveProxy(({ path, args }) => {\n            const pathCopy = [key, ...path];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join(\".\");\n            const getOpts = (name) => {\n                if ([\"setData\", \"setInfiniteData\"].includes(name)) {\n                    const [updater, input, ...rest] = args;\n                    const queryKey = getQueryKey(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest,\n                    };\n                }\n                const [input, ...rest] = args;\n                const queryKey = getQueryKey(fullPath, input);\n                return {\n                    queryKey,\n                    rest,\n                };\n            };\n            const { queryKey, rest, updater } = getOpts(utilName);\n            const contextMap = {\n                fetch: () => context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: () => context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: () => context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: () => context.prefetchInfiniteQuery(queryKey, ...rest),\n                invalidate: () => context.invalidateQueries(queryKey, ...rest),\n                refetch: () => context.refetchQueries(queryKey, ...rest),\n                cancel: () => context.cancelQuery(queryKey, ...rest),\n                setData: () => context.setQueryData(queryKey, updater, ...rest),\n                setInfiniteData: () => context.setInfiniteQueryData(queryKey, updater, ...rest),\n                getData: () => context.getQueryData(queryKey),\n                getInfiniteData: () => context.getInfiniteQueryData(queryKey),\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n","start":1676889524393,"end":1676889524393},{"name":"vite:import-analysis","result":"import { createFlatProxy, createRecursiveProxy } from \"/node_modules/@trpc/server/dist/shared/index.mjs?v=2f17421b\";\nimport { contextProps, } from \"/node_modules/solid-trpc/dist/internals/context.jsx?v=2f17421b\";\nimport { getQueryKey } from \"/node_modules/solid-trpc/dist/internals/getQueryKey.js?v=2f17421b\";\n/**\n * @internal\n */\nexport function createSolidQueryUtilsProxy(context) {\n    return createFlatProxy((key) => {\n        const contextName = key;\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return createRecursiveProxy(({ path, args }) => {\n            const pathCopy = [key, ...path];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join(\".\");\n            const getOpts = (name) => {\n                if ([\"setData\", \"setInfiniteData\"].includes(name)) {\n                    const [updater, input, ...rest] = args;\n                    const queryKey = getQueryKey(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest,\n                    };\n                }\n                const [input, ...rest] = args;\n                const queryKey = getQueryKey(fullPath, input);\n                return {\n                    queryKey,\n                    rest,\n                };\n            };\n            const { queryKey, rest, updater } = getOpts(utilName);\n            const contextMap = {\n                fetch: () => context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: () => context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: () => context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: () => context.prefetchInfiniteQuery(queryKey, ...rest),\n                invalidate: () => context.invalidateQueries(queryKey, ...rest),\n                refetch: () => context.refetchQueries(queryKey, ...rest),\n                cancel: () => context.cancelQuery(queryKey, ...rest),\n                setData: () => context.setQueryData(queryKey, updater, ...rest),\n                setInfiniteData: () => context.setInfiniteQueryData(queryKey, updater, ...rest),\n                getData: () => context.getQueryData(queryKey),\n                getInfiniteData: () => context.getInfiniteQueryData(queryKey),\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n","start":1676889524393,"end":1676889524406,"order":"normal"}]}
