{"resolvedId":"C:/Users/tobis/gamesa-skola/node_modules/solid-trpc/dist/internals/getArrayQueryKey.js?v=2f17421b","transforms":[{"name":"__load__","result":"/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n */\nexport function getArrayQueryKey(queryKey) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [queryKey];\n    const [path, ...input] = queryKeyArrayed;\n    const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n    return [arrayPath, ...input];\n}\n","start":1676889524426,"end":1676889524426},{"name":"vite:import-analysis","result":"/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n */\nexport function getArrayQueryKey(queryKey) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [queryKey];\n    const [path, ...input] = queryKeyArrayed;\n    const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n    return [arrayPath, ...input];\n}\n","start":1676889524426,"end":1676889524426,"order":"normal"}]}
